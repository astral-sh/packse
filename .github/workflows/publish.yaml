name: Publish

env:
  # Enable colored output
  # https://github.com/actions/runner/issues/241
  PY_COLORS: 1
  POETRY_VERSION: "1.6.1"

permissions:
  id-token: write # Needed for AWS CodeArtifact OIDC
  contents: read

on:
  pull_request:
    types: [opened, reopened, synchronize]
  push:
    branches:
      - main

jobs:
  publish-packages:
    name: python-${{ matrix.python-version }}, ${{ matrix.os }}

    strategy:
      matrix:
        os:
          - ubuntu-latest
        python-version:
          - "3.12"

      fail-fast: false

    runs-on: ${{ matrix.os }}
    timeout-minutes: 10

    steps:
      - uses: actions/checkout@v4

      # Only runs during the scheduled job
      # The rest of the workflow will be skipped during scheduled runs unless the last run failed
      - name: Check status of last workflow run
        id: check_last_run
        if: github.event.schedule
        run: |
          WORKFLOW_ID=$( \
            curl \
              --silent \
              --header 'authorization: Bearer ${{ secrets.GITHUB_TOKEN }}' \
              --header 'content-type: application/json' \
              ${{ github.api_url }}/repos/${{ github.repository }}/actions/runs/${{ github.run_id }} \
            | jq -r .workflow_id \
          )

          CONCLUSION=$( \
            curl \
              --silent \
              --header 'authorization: Bearer ${{ secrets.GITHUB_TOKEN }}' \
              --header 'content-type: application/json' \
              "${{ github.api_url }}/repos/${{ github.repository }}/actions/workflows/$WORKFLOW_ID/runs?per_page=1&status=completed&branch=main" \
            | jq -r .workflow_runs[0].conclusion \
          )

          echo "conclusion=$CONCLUSION"
          echo "conclusion=$CONCLUSION" >> $GITHUB_OUTPUT

          # Implementation based on https://github.com/MercymeIlya/last-workflow-status

      - name: Set up Poetry
        if: steps.check_last_run.outcome == 'skipped' || steps.check_last_run.outputs.conclusion == 'failure'
        run: |
          pipx install poetry==${{ env.POETRY_VERSION }}

      - name: Set up Python ${{ matrix.python-version }}
        if: steps.check_last_run.outcome == 'skipped' || steps.check_last_run.outputs.conclusion == 'failure'
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: poetry

      - name: Install zsh
        if: steps.check_last_run.outcome == 'skipped' || steps.check_last_run.outputs.conclusion == 'failure'
        run: |
          sudo apt-get update
          sudo apt-get install zsh

      - name: Install packages
        if: steps.check_last_run.outcome == 'skipped' || steps.check_last_run.outputs.conclusion == 'failure'
        run: |
          poetry install --extras index

      - name: Collect scenarios
        if: steps.check_last_run.outcome == 'skipped' || steps.check_last_run.outputs.conclusion == 'failure'
        run: |
          scenarios=(scenarios/**/*.json)

          # Display for debug
          for scenario in $scenarios
          do
            echo "$scenario"
          done
          echo "SCENARIOS=$scenarios" >> "$GITHUB_ENV"

          # Assigning a glob to a variable in `bash` is such a pain I don't want to talk about it
          # instead we just use zsh
        shell: zsh {0}

      - name: View scenarios
        if: steps.check_last_run.outcome == 'skipped' || steps.check_last_run.outputs.conclusion == 'failure'
        run: |
          poetry run packse view $SCENARIOS

      - name: Build scenarios
        if: steps.check_last_run.outcome == 'skipped' || steps.check_last_run.outputs.conclusion == 'failure'
        run: |
          poetry run packse build --skip-root --short-names $SCENARIOS

      - name: Publish scenarios [local]
        if: github.ref != 'refs/heads/main'
        run: |
          # Start the local index server, do not allow packages from PyPI
          index_url=$(poetry run packse index up --bg --offline --dist-dir "./published")

          # Publish the packages
          poetry run packse publish --anonymous --index-url "$index_url" dist/*

          # Shutdown the index server
          poetry run packse index down

      - name: Publish scenarios [gh pages]
        # if: github.ref == 'refs/heads/main' && (steps.check_last_run.outcome == 'skipped' || steps.check_last_run.outputs.conclusion == 'failure')
        run: |
          commit=$(./scripts/version parts | jq -r ".short_hash")
          poetry run packse index build --no-hash --dist-dir ./dist $SCENARIOS

          git fetch origin gh-pages
          git branch gh-pages FETCH_HEAD
          git checkout gh-pages

          git config user.name "$GITHUB_ACTOR"
          git config user.email "$GITHUB_ACTOR@users.noreply.github.com"

          mkdir "$commit"
          cp -r index/* "./$commit"
          git add "$commit"
          git commit -m "Publish scenarios for $commit"
          git push --set-upstream origin gh-pages
